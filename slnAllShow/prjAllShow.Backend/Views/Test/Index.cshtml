@inject IConfiguration _config;

@{
    ViewData["Title"] = "Index";
}

<h1>Test WeatherForecast</h1>

<div id="app">
    <button v-on:click="GetAuth()" class="btn btn-warning">驗證</button>
    <button v-on:click="CheckAuth()" class="btn btn-primary">重新檢查</button>
    <button v-on:click="PageReload()" class="btn btn-info">重新整理</button>   
    <table class="table table-hover">
        <thead class="table-primary">
            <tr>
                <th>date1</th>
                <th>date2</th>
                <th>temperatureC</th>
                <th>temperatureF</th>
                <th>summary</th>
            </tr>
        </thead>
        <tbody>
            <tr v-for="(item,index) in WeatherList">
                <td>{{dateFormat}}</td>
                <td>{{SetDateFormat('YYYY-MM-DD HH:mm:ss')}}</td>
                <td>{{item.temperatureC}}</td>
                <td>{{item.temperatureF}}</td>
                <td>{{item.summary}}</td>
            </tr>
        </tbody>
    </table>
</div>

<script>
    var authUrl='api/GetAuth/getauthtoken';
    //var apiUrl='@(_config.GetSection("WebAPIUrl").Value)/WeatherForecast';
    var apiUrl='/api/Weather';
    var apiCheck='/api/GetAuth/checktokenvalid';
    //var apiUrl='https://localhost:44393/WeatherForecast';
    const vm = Vue.createApp({
        //el: '#app',
        data() {
            return {
                WeatherList: null
            }
        },
        //data: {
        //    WeatherList: null
        //},      
        mounted() {
            baseInstance.get(apiUrl)
            .then(response => {
                this.WeatherList = response.data;
            });
        },
        computed: {
          dateFormat() {
            return moment(this.date).format('YYYY-MM-DD');
          }
        },
        //filters: {
        //    dateFormat: function (value, myFormat) {
        //        return moment(value).format(myFormat || 'YYYY-MM-DD, HH:mm:ss');
        //    }
        //},
        methods: {        
            GetAuth() {
                baseInstance.get(authUrl)
                .then(response => {
                    //console.log(response);
                    window.localStorage.setItem("token", "none"/*response.data.access_token*/); 
                    window.localStorage.setItem("refreshtoken", "none"/*response.data.refresh_token*/); 
                    alert('驗證完成');

                    window.location.reload();
                });
                //$.ajax({
                //    url: authUrl,
                //    type: 'GET',
                //    success: function (obj, textStatus, xhr) {   
                //        window.localStorage.setItem("token", obj.access_token); 
                //        window.localStorage.setItem("refreshtoken", obj.refresh_token); 
                //        alert('驗證完成');
                //    },
                //    error: function (xhr, textStatus, errorThrown) {
                //        var jsonResponse = JSON.parse(xhr.responseText);
                //        var errors = jsonResponse.errors;
                //        alert(errors[0]);
                //    }
                //});
            },
            CheckAuth() {
                var data = { 
                    "Token": window.localStorage.getItem("token"),
                    "RefreshToken": window.localStorage.getItem("refreshtoken")
                };

                //baseInstance.post(apiCheck, data)
                baseInstance.get(apiCheck)
                .then( (response) => {
                    //window.localStorage.setItem("token", response.data.access_token); 
                    //window.localStorage.setItem("refreshtoken", response.data.refresh_token); 
                    alert('重新驗證完成'); 
                    
                    window.location.reload();
                })
                .catch(function (error) {

                    if (error.response) {
                      // Request made and server responded
                      var statusCode = error.response.status;
                      if(statusCode == 401){
                        var errors = error.response.data.errors;
                        alert('Error happened: ' + errors[0]);
                      }else{
                        console.log(error.response.data.errors);
                      }                      
                    } 

                });
                /*
                $.ajax({
                    type: "POST",
                    url: apiCheck,
                    headers:{
					    'RequestVerificationToken':$('input:hidden[name="__RequestVerificationToken"]').val()
				    },
                    data: JSON.stringify(data),
                    contentType : 'application/json;',
                    statusCode: {
                        401: function(xhr, status, error) {
                                var jsonResponse = JSON.parse(xhr.responseText);
                                var errors = jsonResponse.errors;
                                alert('Error happened: ' + errors[0]);
                        }
                    }
                }).done(function( obj ) {
                    window.localStorage.setItem("token", obj.access_token); 
                    window.localStorage.setItem("refreshtoken", obj.refresh_token); 
                    alert('重新驗證完成');                   
                }).fail(function(xhr, status, error) {

                });  
                */
            },
            PageReload(){
                window.location.reload();
            },
            SetDateFormat(format) {
                return moment(this.date).format(format);
                //return `${salut} ${this.firstName} ${this.lastName}`
            }
        }
    }).mount('#app');
</script>